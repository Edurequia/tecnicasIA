Site Jason - https://github.com/jason-lang/jason
Tutorial - https://github.com/jason-lang/jason/blob/master/doc/tutorials/getting-started/readme.adoc
Instalação - https://github.com/jason-lang/jason/blob/master/doc/install.adoc
VS Code + Jason - https://github.com/jason-lang/jason/blob/master/doc/tutorials/vscode/readme.adoc

Jason  - três tipos de arquivo

nomeProjeto.mas2j 
	-> descrição do projeto do SMA
      -> execução é distribuída ou centralizada
      -> quais são os agentes no ambiente e suas quantidade

nomeAgente.asl
	-> código AgentSpeak(L), que é um Prolog melhorado, contendo:
	      - crenças ou fatos do ambiente (base de conhecimento de um agente)
            - planos ou regras (conjunto de ações que são disparadas quando um evento ocorre no ambiente - evento externo)
            - subplano (conjunto de ações que são disparadas quando um evento interno ocorre)
	-> alguns comandos de apoio que são do Jason
	      .print() -> exibe alguma coisa no terminal de verbose
            .send() -> diretiva de comunicação entre agentes
		.send(agente,tell,crença/fato)
            .send(agente,achieve,plano)
            .send(agente,untell,crença/fato)

            .broadcast -> diretiva de comunicação de um agente para muitos agentes
		.broadcast(tell,crença/fato)
            .broadcast(untell,crença/fato)

            .wait(milissegundos) -> para a simulação

AmbienteDeSimulacao.java 
	-> código java que implementa o ambiente em que os agentes estão inseridos
	-> principais métodos: 
               init() -> inicialização do SMA -> com percepções iniciais
               executeAction() -> tratamento das ações solicitadas pelos agentes

        -> métodos secundários: 
                addPercept() -> ambiente avisando todos os agentes de uma percepção
                removePercep() -> ambiente retirando uma percepção gerada

No SMA em Jason, os agentes podem fazer comunicação via diretivas:
    .send(agente,tell,crenca)
    .send(agente,achieve,plano)
    .broadcast(crenca)