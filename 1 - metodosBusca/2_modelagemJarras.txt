Estados do Problema das Jarras
    Classe; atributos; tipos
    Jarra; jarra1, jarra2; int, int
    Estado inicial: jarra1 = 0; jarra2 = 0
    Estados finais: jarra1 == 2 && jarra2 == 0 || jarra1 == 0 && jarra2 == 2
    

Regras de transição do Problema das Jarras 
    Métodos da Classe
    1) encherJarra1
    2) encherJarra2
    3) esvaziarJarra1
    4) esvaziarJarra2
    5) despejarJarra1EmJarra2
    6) despejarJarra2EmJarra1

Como tratar os visitados ou objetos ou estados já produzidos
    Lista encadeada ou HashSet com coersão dos atributos em string

Mapear as restrições do Problema


No processo de resolução do problema por métodos de busca, são feitas 3 perguntas/métodos:
1) é válido?
2) foi visitado?
3) é a meta/objetivo?
----------------------------------

1) encherJarra1
2) encherJarra2
3) esvaziarJarra1
4) esvaziarJarra2
5) despejarJarra1EmJarra2
6) despejarJarra2EmJarra1

SOLUÇÃO COM MÉTODO EM BUSCA EM AMPLITUDE/LARGURA
    - usa fila
                                        (jarra1,jarra2)
                                             (0,0)
                                  r1(3,0)             r2(0,4)  
                           r2(3,4)    r5(0,3)      r6(3,1)
                             X    r1(3,3)        r3(0,1)
                                     X         r4(1,0)
                                           r2(1,4) 
                                        r2(3,2) 
                                    r3(0,2)

visitados: "00" "30" "04" "34" "03" "31" "33" "01" "10" "14" "32"  "02"


SOLUÇÃO COM MÉTODO EM BUSCA EM PROFUNDIDADE
    - usa pilha
                                        (jarra1,jarra2)
                                             (0,0)
                                        r1(3,0)
                                    r2(3,4)
                                r3(0,4)
                            r6(3,1)
                        r3(0,1)
                    r6(1,0)
                r2(1,4)
            r6(3,2)
        r3(0,2)

visitados: "00" "30" "34" "04" "01" "10" "14" "32" "02"

Características do problema:
1) espaço de busca é pequeno (árvore gerada)
2) o estado final é conhecido, ou seja, o que é esperado é conhecido
3) sem restrições
4) não tem heurística ou dica de atalho
