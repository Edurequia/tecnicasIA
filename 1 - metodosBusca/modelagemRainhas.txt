Há um tabuleiro NxN (no nosso caso, 8 x 8), como um tabuleiro de xadrez.
Há também N rainhas de xadrez (no nosso caso, 8).
Obedecendo as regras do jogo de xadrez, o problema é colocar as N (8) rainhas
no tabuleiro (uma a uma), sem que nenhuma 'mate' ou 'coma' a outra (linha, coluna,
diagonais principais e diagonais secundárias).

Características do problema:
1) espaço de busca dependente do N (árvore gerada), o espaço cresce, o consumo de memória aumenta conforme N
2) o estado final NÃO é conhecido, ou seja, sabe-se parte do estado final (tipo problema de empacotamento)
3) com restrições (mais de uma rainha não pode estar na mesma linha, coluna, diagonais principais, diagonais secundárias)
4) não tem heurística ou dica de atalho (sem alguma informação que ajude a ir para um estado específico)

Estados do Problema das Jarras
    Classe; atributos; tipos
    Rainhas; matriz NxN de inteiros representando o tabuleiro, quantidade de rainhas posicionadas (inteiro)
    Estado inicial: matriz inicializada com 0; quantidade de rainhas inicializada com 0
    Estados finais: quantidade de rainhas igual N

Regras de transição do Problema das Jarras 
    Métodos da Classe
    1) posicionar uma rainha no primeiro slot/casa livre


Como tratar os visitados ou objetos ou estados já produzidos
    Lista encadeada ou HashSet com coersão dos atributos em string
    "0000000000000000" "100000000000" "1000001000000000"

Mapear as restrições do Problema
testar cada linha 
testar cada coluna
testar todas as diagonais principais
testar todas as diagonais secundárias

Tudo isso, procurando mais de uma rainha


No processo de resolução do problema por métodos de busca, são feitas 3 perguntas/métodos:
1) é válido?
public boolean ehValido() {}
2) foi visitado?
if (visitados.contains(estado))
3) é a meta/objetivo?
public boolean ehMeta() {}

|   |   |   |   |
|   |   |   |   |
|   |   |   |   |
|   |   |   |   |
Qtd = 0

|   | r |   |   |
|   |   |   |   |
|   |   |   |   |
|   |   |   |   |
Qtd = 1

|   | r |   |   |
|   |   |   | r |
|   |   |   |   |
|   |   |   |   |
Qtd = 2

|   | r |   |   |
|   |   |   | r |
| r |   |   |   |
|   |   |   |   |
Qtd = 3

|   | r |   |   |
|   |   |   | r |
| r |   |   |   |
|   |   | r |   |
Qtd = 3